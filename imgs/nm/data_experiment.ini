[vars]
prefix="/home/sekol/experiment"

[main]
name="dataset 007.beta prefix predict"
tf_manager=<tf_manager>
output="{prefix}"
overwrite_output_dir=True
batch_size=64
epochs=2
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner>]
postprocess=None
evaluation=[("target", evaluators.bleu.BLEU1), ("target", evaluators.bleu.BLEU4)]
logging_period=1000
validation_period=10000
runners_batch_size=32
random_seed=1234

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=16
num_sessions=1

[image_reader]
class=readers.image_reader.image_reader
prefix="data/imgs/"
pad_w=32
pad_h=32

[train_data]
class=dataset.load_dataset_from_files
s_target="data/train_prefix.txt"
s_images=("data/train_imgs.txt", <image_reader>)

[val_data]
class=dataset.load_dataset_from_files
s_target="data/dev_prefix.txt"
s_images=("data/dev_imgs.txt", <image_reader>)

[image_encoder]
class=encoders.cnn_encoder.CNNEncoder
name="img_encoder"
data_id="images"
convolutions=[("R", 5, 16), ("M", 5, 1, "valid"), ("R", 5, 32), ("M", 5, 1, "valid"), ("R", 3, 32), ("M", 3, 1, "valid"), ("R", 3, 64), ("M", 3, 1, "valid"), ("R", 3, 128), ("M", 3, 1, "valid")]
image_height=32
image_width=32
pixel_dim=3
batch_normalize=True

[decoder_vocabulary]
class=vocabulary.from_wordlist
path="{prefix}/vocab.pickle"

;[decoder_vocabulary]
;class=vocabulary.from_dataset
;datasets=[<train_data>]
;series_ids=["target"]
;max_size=9
;save_file="{prefix}/vocab.pickle"
;overwrite=True



[seq_decoder]
class=decoders.decoder.Decoder
name="prefix_decoder"
encoders=[<image_encoder>]
vocabulary=<decoder_vocabulary>
data_id="target"
max_output_len=30
dropout_keep_prob=0.9
embedding_size=256
rnn_size=128
attentions=[<image_attention>]
rnn_cell="GRU"
conditional_gru=True

[image_attention]
class=attention.Attention
state_size=128
name="attention_image_enc"
encoder=<image_encoder>

[trainer]
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<seq_decoder>]
l2_weight=1.0e-8
clip_norm=1.0

[runner]
class=runners.GreedyRunner
decoder=<seq_decoder>
output_series="target"

